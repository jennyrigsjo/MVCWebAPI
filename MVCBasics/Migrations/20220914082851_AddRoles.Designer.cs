// <auto-generated />
using System;
using MVCBasics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCBasics.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220914082851_AddRoles")]
    partial class AddRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<int>("LanguagesID")
                        .HasColumnType("int");

                    b.Property<int>("PeopleID")
                        .HasColumnType("int");

                    b.HasKey("LanguagesID", "PeopleID");

                    b.HasIndex("PeopleID");

                    b.ToTable("LanguagePerson");

                    b.HasData(
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 1
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 2
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 3
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 4
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 5
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 6
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 9
                        },
                        new
                        {
                            LanguagesID = 1,
                            PeopleID = 13
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 1
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 2
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 3
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 6
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 7
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 8
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 9
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 10
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 11
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 12
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 13
                        },
                        new
                        {
                            LanguagesID = 2,
                            PeopleID = 14
                        },
                        new
                        {
                            LanguagesID = 3,
                            PeopleID = 9
                        },
                        new
                        {
                            LanguagesID = 3,
                            PeopleID = 13
                        },
                        new
                        {
                            LanguagesID = 3,
                            PeopleID = 14
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b62c48c9-1d56-48e6-a60e-0ea9db7a08c3",
                            ConcurrencyStamp = "f4190c11-1a3a-493e-a75e-09e3c49f1ca2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "caec67e9-a49b-44b9-a737-55bcd70c7acc",
                            ConcurrencyStamp = "c39f9872-cd44-45fd-8c87-1a2a69d66b73",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVCBasics.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MVCBasics.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CountryID = 1,
                            Name = "New Asgard"
                        },
                        new
                        {
                            ID = 2,
                            CountryID = 1,
                            Name = "Jotunheim"
                        },
                        new
                        {
                            ID = 3,
                            CountryID = 2,
                            Name = "New York"
                        },
                        new
                        {
                            ID = 4,
                            CountryID = 2,
                            Name = "Westview"
                        },
                        new
                        {
                            ID = 5,
                            CountryID = 3,
                            Name = "Göteborg"
                        },
                        new
                        {
                            ID = 6,
                            CountryID = 3,
                            Name = "Alingsås"
                        });
                });

            modelBuilder.Entity("MVCBasics.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Norway"
                        },
                        new
                        {
                            ID = 2,
                            Name = "USA"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("MVCBasics.Models.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Norwegian"
                        },
                        new
                        {
                            ID = 2,
                            Name = "English"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Swedish"
                        });
                });

            modelBuilder.Entity("MVCBasics.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CityID = 1,
                            Name = "Thor Odinson",
                            Phone = "0123 456789"
                        },
                        new
                        {
                            ID = 2,
                            CityID = 1,
                            Name = "Valkyrie",
                            Phone = "0123 456789"
                        },
                        new
                        {
                            ID = 3,
                            CityID = 1,
                            Name = "Sif",
                            Phone = "7777 777777"
                        },
                        new
                        {
                            ID = 4,
                            CityID = 2,
                            Name = "Loki Odinson",
                            Phone = "1234 567890"
                        },
                        new
                        {
                            ID = 5,
                            CityID = 2,
                            Name = "Sylvie Laufeysdottir",
                            Phone = "0000 000000"
                        },
                        new
                        {
                            ID = 6,
                            CityID = 3,
                            Name = "Jane Foster",
                            Phone = "2345 678901"
                        },
                        new
                        {
                            ID = 7,
                            CityID = 3,
                            Name = "Tony Stark",
                            Phone = "9999 999999"
                        },
                        new
                        {
                            ID = 8,
                            CityID = 3,
                            Name = "Nick Fury",
                            Phone = "8888 888888"
                        },
                        new
                        {
                            ID = 9,
                            CityID = 3,
                            Name = "Natasha Romanoff",
                            Phone = "8888 888888"
                        },
                        new
                        {
                            ID = 10,
                            CityID = 4,
                            Name = "Darcy Lewis",
                            Phone = "3456 789012"
                        },
                        new
                        {
                            ID = 11,
                            CityID = 4,
                            Name = "Wanda Maximoff",
                            Phone = "5555 555555"
                        },
                        new
                        {
                            ID = 12,
                            CityID = 4,
                            Name = "Vision",
                            Phone = "5555 555555"
                        },
                        new
                        {
                            ID = 13,
                            CityID = 5,
                            Name = "Erik Selvig",
                            Phone = "4567 890123"
                        },
                        new
                        {
                            ID = 14,
                            CityID = 6,
                            Name = "Jenny Rigsjö",
                            Phone = "0763 446373"
                        });
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("MVCBasics.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCBasics.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVCBasics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVCBasics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCBasics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVCBasics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCBasics.Models.City", b =>
                {
                    b.HasOne("MVCBasics.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVCBasics.Models.Person", b =>
                {
                    b.HasOne("MVCBasics.Models.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVCBasics.Models.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("MVCBasics.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
